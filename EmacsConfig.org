#+title: Emacs Configuration Generator
#+PROPERTY: header-args:emacs-lisp :tangle (eval user-init-file) :mkdirp yes
#+STARTUP: overview

* Introduction

This file generates [[file:init.el][init.el]] which can be loaded by Emacs at startup. 

The following variables are used to tweak some of the configuration pieces for use in the live streams so you might need to adjust them for your local machine if you try to use this configuration directly.

#+begin_src emacs-lisp

;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
;;       in Emacs and init.el will be generated automatically!

;; You will most likely need to adjust this font size for your system!
(defvar drudge/default-font-size 120)
(defvar drudge/default-variable-font-size 120)

#+end_src

* Tips for Use

In this document I've added links in many places that lead you to documentation for the various packages we use.  If you're looking at this file in Emacs, you can put your cursor on a link and press =C-c C-o= or run =M-x org-open-at-point= to open the link in your web browser.

* OS-specific Variables
#+begin_src emacs-lisp

  (cond
   ((string= system-type "darwin")
    (setq drudge/system-directory-path-start "~/github"))
    ((string= system-type "gnu/linux")
     (setq drudge/system-directory-path-start "~/github"))
    ((string= system-type "windows-nt")
     (cond
      ((string= user-login-name "SESA93320")(setq drudge/system-directory-path-start "on work computer"))
      ((string= user-login-name "Jason")(setq drudge/system-directory-path-start "C:/Users/Jason/Documents/github/")))))

#+end_src

* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Basic UI Configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.  If you're just getting started in Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)= line if you'd like to still see that.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration

#+begin_src emacs-lisp

(set-face-attribute 'default nil :font "DejaVu Sans Mono-12" :height drudge/default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "DejaVu Sans Mono-12" :height drudge/default-font-size)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height drudge/default-font-size :weight 'regular)

#+end_src

* Keybinding Configuration

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.  [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

** Leader key setup
#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :config
    (general-create-definer drudge/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (drudge/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "i"  '(:ignore t :which-key "config and init files")
      "ii"  '(my-open-init-file :which-key "open init file")
      "ie"  '(my-open-emacs-config-org :which-key "open EmacsConfig file")
      "m"  '(:ignore t :which-key "move")
      "mw"  '(:ignore t :which-key "move by word")
      "ms"  '(:ignore t :which-key "move by sentence")
      "b"  '(:ignore t :which-key "buffer cycle")
      "bk" '(next-buffer :which-key "next buffer")
      "bj" '(switch-to-prev-buffer :which-key "previous buffer")))

#+end_src

** evil setup
#+begin_src emacs-lisp

  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

#+end_src

** undo-tree
#+begin_src emacs-lisp

  (use-package undo-tree
   :ensure t
   :after evil
   :diminish
   :config
   (evil-set-undo-system 'undo-tree)
   (global-undo-tree-mode 1))

#+end_src

** Key-chord

#+begin_src emacs-lisp

  (use-package key-chord
    :after evil
    :config
    (key-chord-mode 1)
    (key-chord-define evil-insert-state-map "jk" 'evil-normal-state))

#+end_src

* UI Configuration

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-dracula t))

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))

#+end_src

** Helm

#+begin_src emacs-lisp

  (use-package helm
    :ensure t
    :demand
    :bind (("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-x b" . helm-buffers-list)
           ("C-x c o" . helm-occur)) ;SC
    ("M-y" . helm-show-kill-ring) ;SC
    ("C-x r b" . helm-filtered-bookmarks) ;SC
    :preface (require 'helm-config)
    :config (helm-mode 1))

#+end_src

** Helm-ag
Helm-ag is supposed to enable searching within files using the silver-surfer search, i.e. must faster than grep.
#+begin_src emacs-lisp
  ;; (use-package helm-ag)
#+end_src
** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

  ;; (use-package ivy
  ;;   :diminish
  ;;   :bind (("C-s" . swiper)
  ;;          :map ivy-minibuffer-map
  ;;          ("TAB" . ivy-alt-done)
  ;;          ("C-l" . ivy-alt-done)
  ;;          ("C-j" . ivy-next-line)
  ;;          ("C-k" . ivy-previous-line)
  ;;          :map ivy-switch-buffer-map
  ;;          ("C-k" . ivy-previous-line)
  ;;          ("C-l" . ivy-done)
  ;;          ("C-d" . ivy-switch-buffer-kill)
  ;;          :map ivy-reverse-i-search-map
  ;;          ("C-k" . ivy-previous-line)
  ;;          ("C-d" . ivy-reverse-i-search-kill))
  ;;   :config
  ;;   (ivy-mode 1))

  ;; (use-package ivy-rich
  ;;   :init
  ;;   (ivy-rich-mode 1))

  ;;  (use-package counsel
  ;;    :bind (("C-M-j" . 'counsel-switch-buffer)
  ;;           :map 
  ;;          minibuffer-local-map
  ;;          ("C-r" . 'counsel-minibuffer-history))
  ;;   :config
  ;;   (counsel-mode 1))

#+end_src

** Vertico

#+begin_src emacs-lisp

  ;; (use-package vertico
  ;;   :ensure t
  ;;   :bind (:map vertico-map
  ;;          ("C-j" . vertico-next)
  ;;          ("C-k" . vertico-previous)
  ;;          ("C-f" . vertico-exit)
  ;;          :map minibuffer-local-map
  ;;          ("M-h" . dw/minibuffer-backward-kill))
  ;;   :custom
  ;;   (vertico-cycle t)
  ;;   :custom-face
  ;;   (vertico-current ((t (:background "#3a3f5a"))))
  ;;   :init
  ;;   (vertico-mode))

  ;; (use-package savehist
  ;;   :init
  ;;   (savehist-mode))

#+end_src

** Marginalia

#+begin_src emacs-lisp

  ;; (use-package marginalia
  ;;   :after vertico
  ;;   :ensure t
  ;;   :custom
  ;;   (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  ;;   :init
  ;;   (marginalia-mode))

#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

*Note* that in the tutorial series, he used different remaps for function and variable. I'll try this out, but the names of the original remap are shown below:
- helpful-function
- helpful-variable

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key)
    ([remap describe-symbol] . helpful-symbol))

#+end_src

** Hydra 

This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.  We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (defhydra hydra-switch-buffer (:timeout 4)
    "switch buffer"
    ("j" switch-to-next-buffer "prev")
    ("k" switch-to-prev-buffer "next")
    ("f" nil "finished" :exit t))

  (defhydra hydra-move-word (:timeout 4)
    "move word"
    ("j" evil-backward-word-begin "prev")
    ("k" evil-forward-word-end "next")
    ("f" nil "finished" :exit t))

  (defhydra hydra-move-sentence (:timeout 4)
    "move sentence"
    ("j" org-backward-sentence "prev")
    ("k" org-forward-sentence "next")
    ("f" nil "finished" :exit t))

  (drudge/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text")
    "mw" '(hydra-move-word/body :which-key "move word")
    "ms" '(hydra-move-sentence/body :which-key "move sentence")
    "bs" '(hydra-switch-buffer/body :which-key "switch buffers"))

#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Basic Config

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.  There's a lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.

#+begin_src emacs-lisp

    (defun drudge/org-mode-setup ()
      (org-indent-mode)
      (variable-pitch-mode 1)
      (visual-line-mode 1))

    (use-package org
      :hook (org-mode . drudge/org-mode-setup)
      :config
      (setq org-ellipsis " ▾")
  ;;    (setq org-blank-before-new-entry
  ;;      '((heading . always)
  ;;       (plain-list-item . always)))

      (setq org-agenda-start-with-log-mode t)
      (setq org-log-done 'time)
    ;; make text at heading levels line up
      (set-face-attribute 'org-hide nil :inherit 'fixed-pitch)
      (setq org-log-into-drawer t)
      ;; Show overview when open
      (setq org-startup-folded t)
      (setq org-hide-emphasis-markers t)
    ;; date-time format
      (setq-default org-display-custom-times t)
      (setq org-time-stamp-custom-formats '("<%Y-%b-%d %a>" . "<%Y-%b-%d %a %H:%M>"))
      ;; (setq org-agenda-files
      ;;       '("~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org"
      ;;         "~/Projects/Code/emacs-from-scratch/OrgFiles/Habits.org"
      ;;         "~/Projects/Code/emacs-from-scratch/OrgFiles/Birthdays.org"))

      (require 'org-habit)
      (add-to-list 'org-modules 'org-habit)
      (setq org-habit-graph-column 60)

      (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
          (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

      (setq org-refile-targets
        '(("Archive.org" :maxlevel . 1)
          ("Tasks.org" :maxlevel . 1)))

      ;; Save Org buffers after refiling!
      (advice-add 'org-refile :after 'org-save-all-org-buffers)

      (setq org-tag-alist
        '((:startgroup)
           ; Put mutually exclusive tags here
           (:endgroup)
           ("@errand" . ?E)
           ("@home" . ?H)
           ("@work" . ?W)
           ("agenda" . ?a)
           ("planning" . ?p)
           ("publish" . ?P)
           ("batch" . ?b)
           ("note" . ?n)
           ("idea" . ?i)))

      ;; Configure custom agenda views
      (setq org-agenda-custom-commands
       '(("d" "Dashboard"
         ((agenda "" ((org-deadline-warning-days 7)))
          (todo "NEXT"
            ((org-agenda-overriding-header "Next Tasks")))
          (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

        ("n" "Next Tasks"
         ((todo "NEXT"
            ((org-agenda-overriding-header "Next Tasks")))))

        ("W" "Work Tasks" tags-todo "+work-email")

        ;; Low-effort next actions
        ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
         ((org-agenda-overriding-header "Low Effort Tasks")
          (org-agenda-max-todos 20)
          (org-agenda-files org-agenda-files)))

        ("w" "Workflow Status"
         ((todo "WAIT"
                ((org-agenda-overriding-header "Waiting on External")
                 (org-agenda-files org-agenda-files)))
          (todo "REVIEW"
                ((org-agenda-overriding-header "In Review")
                 (org-agenda-files org-agenda-files)))
          (todo "PLAN"
                ((org-agenda-overriding-header "In Planning")
                 (org-agenda-todo-list-sublevels nil)
                 (org-agenda-files org-agenda-files)))
          (todo "BACKLOG"
                ((org-agenda-overriding-header "Project Backlog")
                 (org-agenda-todo-list-sublevels nil)
                 (org-agenda-files org-agenda-files)))
          (todo "READY"
                ((org-agenda-overriding-header "Ready for Work")
                 (org-agenda-files org-agenda-files)))
          (todo "ACTIVE"
                ((org-agenda-overriding-header "Active Projects")
                 (org-agenda-files org-agenda-files)))
          (todo "COMPLETED"
                ((org-agenda-overriding-header "Completed Projects")
                 (org-agenda-files org-agenda-files)))
          (todo "CANC"
                ((org-agenda-overriding-header "Cancelled Projects")
                 (org-agenda-files org-agenda-files)))))))

      (setq org-capture-templates
        `(("t" "Tasks / Projects")
          ("tt" "Task" entry (file+olp "~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org" "Inbox")
               "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

          ("j" "Journal Entries")
          ("jj" "Journal" entry
               (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
               "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
               ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
               :clock-in :clock-resume
               :empty-lines 1)
          ("jm" "Meeting" entry
               (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
               "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
               :clock-in :clock-resume
               :empty-lines 1)

          ("w" "Workflows")
          ("we" "Checking Email" entry (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
               "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

          ("m" "Metrics Capture")
          ("mw" "Weight" table-line (file+headline "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org" "Weight")
           "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

      (define-key global-map (kbd "C-c j")
        (lambda () (interactive) (org-capture nil "jj")))

      (drudge/org-font-setup))

#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
    ;; :custom
    ;; (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  (defun drudge/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . drudge/org-mode-visual-fill))

#+end_src

** Better Font Faces

The =drudge/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun drudge/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.4)
                    (org-level-2 . 1.2)
                    (org-level-3 . 1.1)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

    (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (python . t)
        (shell . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Org-roam

#+begin_src emacs-lisp

    ;;     (if (eq system-type 'darwin)
    ;;           (setq system-specific-org-roam-directory "~/github/org/roam"))
    ;;     (if (eq system-type 'windows-nt)
    ;;           (setq system-specific-org-roam-directory "C:/Users/Jason/Documents/github/Org/roam"))
    ;;     (if (eq system-type 'gnu/linux)
    ;;           (setq system-specific-org-roam-directory "~/github/org/roam"))

    (setq system-specific-org-roam-directory (expand-file-name "org/roam" drudge/system-directory-path-start))

        (use-package org-roam
          :ensure t
          :init
          (setq org-roam-v2-ack t)
          :custom
          (org-roam-directory system-specific-org-roam-directory)
          (org-roam-completion-everywhere t)
          (org-roam-capture-templates
           '(("d" "default" plain
              "%?"
              :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
              :unnarrowed t)
             ("s" "Scrum Mastery" plain
               "\n* Source\n\Book: [[id:7B6531E9-3AF7-47D3-A7CA-4EE56E1E9431][Scrum Mastery]]\nPage: %^{page}\n\n\n* Book Notes\n\n%?\n* Thoughts and Ideas\n"
             :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+captured: %U")
              :unnarrowed t)))
         :bind (("C-c n l" . org-roam-buffer-toggle)
                 ("C-c n f" . org-roam-node-find)
                 ("C-c n i" . org-roam-node-insert)
                 ("C-c n t" . org-roam-tag-add)
                 ("C-c n g" . org-roam-ui-mode)
                 :map org-mode-map
                 ("C-M-i" . completion-at-point))
          :config
          (org-roam-setup))

    (setq org-roam-mode-section-functions
          (list #'org-roam-backlinks-section
                #'org-roam-reflinks-section
                ;; #'org-roam-unlinked-references-section
                ))

      (add-to-list 'display-buffer-alist
                   '("\\*org-roam\\*"
                     (display-buffer-in-direction)
                     (direction . right)
                     (window-width . 0.33)
                     (window-height . fit-window-to-buffer)))

  ;;  (add-to-list 'load-path "~/.emacs.d/private/org-roam-ui")
  ;;  (load-library "org-roam-ui")


#+end_src

** Org-roam-ui

#+begin_src emacs-lisp
  (use-package org-roam-ui
    ;;:straight
     ;; (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
      :after org-roam
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow t
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start t)	)
#+end_src

#+RESULTS:
: t

** Org-Tempo

This package helps to insert code snippet for different languages.

#+begin_src emacs-lisp

  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python :results output"))

#+end_src

** Org-download

This package enables a captured screenshot to be pasted from the clipboard. The blog that the config was copied from is [[https://zzamboni.org/post/how-to-insert-screenshots-in-org-documents-on-macos/][here]]. Note that a system utility to manage image-pasting has to be identified. For MacOS, use pngpaste. For Windows, gotta figure it out. Will need to use the variable system-type. 

#+begin_src emacs-lisp

  (if (eq system-type 'darwin)
        (setq system-screenshot-method "/usr/local/bin/pngpaste %s"))
  (if (eq system-type 'windows-nt)
        (setq system-screenshot-method "convert clipboard: %s"))
  (if (eq system-type 'gnu/linux)
        (setq system-screenshot-method "xclip -selection clipboard -t image/png -o > %s"))
        ;;(setq system-screenshot-method "gnome-screenshot -a -c %s"))

  (use-package org-download
    :after org
    :defer nil
    :custom
    (org-download-method 'directory)
    (org-download-image-dir "images")
    (org-download-heading-lvl nil)
    (org-download-timestamp "%Y%m%d-%H%M%S_")
    (org-image-actual-width 300)
    (org-download-screenshot-method system-screenshot-method)
    :bind
    ("C-M-y" . org-download-screenshot)
    :config
    (require 'org-download))

#+end_src

#+RESULTS:
: org-download-screenshot

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that drudge/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun drudge/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "EmacsConfig.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'drudge/org-babel-tangle-config)))

#+end_src

#+RESULTS:
| (lambda nil (add-hook 'after-save-hook #'drudge/org-babel-tangle-config)) | org-bullets-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | drudge/org-mode-visual-fill | drudge/org-mode-setup | (lambda nil (display-line-numbers-mode 0)) |

** Deft for Roam
Use Deft to search through Roam notes. Taken from [[https://lucidmanager.org/productivity/taking-notes-with-emacs-org-mode-and-org-roam/][here]].

#+begin_src emacs-lisp
  (use-package deft
    :config
    (setq deft-directory system-specific-org-roam-directory
          deft-recursive t
           deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n"
           deft-use-filename-as-title t)
     :bind
     ("C-c n d" . deft))
#+end_src

#+RESULTS:
: deft

* Development

** Projectile

# [[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

 #+begin_src emacs-lisp
   (use-package projectile
     :diminish projectile-mode
     :config (projectile-mode)
     :custom ((projectile-completion-system 'ivy))
     :bind-keymap
     ("C-c p" . projectile-command-map)
     :init
     ;; NOTE: Set this to the folder where you keep your Git repos!
     (when (file-directory-p "~/github/Projects")
       (setq projectile-project-search-path '("~/github/Projects")))
     (setq projectile-switch-project-action #'projectile-dired))
   (use-package counsel-projectile
     :config (counsel-projectile-mode))
 #+end_src

** Magit

# [[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

 #+begin_src emacs-lisp

   (use-package magit
     :custom
     (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1))

   ;; NOTE: Make sure to configure a GitHub token before using this package!
   ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
   ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
   (use-package forge)

 #+end_src
 
** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Applications

** Open EmacsConfig.org file

Function to open this file. Will be bound to a SPC shortcut.

#+begin_src emacs-lisp

    (defun my-open-emacs-config-org ()
      "Open the init file."
      (interactive)
  ;    (find-file (concat (file-name-directory user-init-file) "EmacsConfig.org")))
      ;; (if (eq system-type 'darwin)
      ;;   (setq emacs-config-orgfile-location "~/github/emacs-init/EmacsConfig.org"))
      ;; (if (eq system-type 'windows-nt)
      ;;   (setq emacs-config-orgfile-location "C:/Users/Jason/Documents/github/emacs-init/EmacsConfig.org"))
      ;; (if (eq system-type 'gnu/linux)
      ;;   (setq emacs-config-orgfile-location "~/github/emacs-init/EmacsConfig.org"))
      ;; (find-file emacs-config-orgfile-location))
    (find-file (expand-file-name "emacs-init/EmacsConfig.org" drudge/system-directory-path-start)))

  #+end_src

** Open init.el

Function to open the actual init.el file. This should only be used as a reference. The master is this EmacsConfig.org file.

#+begin_src emacs-lisp

  (defun my-open-init-file ()
    "Open the init file."
    (interactive)
    (find-file user-init-file))

#+end_src

** Some App

This is an example of configuring another non-Emacs application using org-mode.  Not only do we write out the configuration at =.config/some-app/config=, we also compute the value that gets stored in this configuration from the Emacs Lisp block above it.

#+NAME: the-value
#+begin_src emacs-lisp :tangle no

  (+ 55 100)

#+end_src

#+begin_src conf :tangle no .config/some-app/config :noweb yes :mkdirp yes

  value=<<the-value()>>

#+end_src
